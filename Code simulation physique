#include <WiFi.h>
#include <DHT.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

// Pins configuration
#define DHTPIN 23          // DHT22 Data pin connected to GPIO 23
#define DHTTYPE DHT22      // Type of DHT sensor
#define RELAY_PIN 25       // Relay connected to GPIO 25
#define BUZZER_PIN 26      // Buzzer connected to GPIO 26
#define SOIL_SENSOR_PIN 34 // Soil moisture sensor connected to GPIO 34
#define TRIG_PIN 12        // Trig pin for ultrasonic sensor
#define ECHO_PIN 13        // Echo pin for ultrasonic sensor

// Wi-Fi credentials
#define WIFI_SSID "Wokwi-GUEST"  // Replace with your SSID
#define WIFI_PASSWORD ""         // Replace with your Wi-Fi password

// Firebase credentials
#define API_KEY "AIzaSyApMz3zTvc1HJBjwnyyyqy7ijHSasucoAk"  // Replace with your Firebase API Key
#define DATABASE_URL "https://greenguard-b8353-default-rtdb.firebaseio.com/"  // Replace with your Firebase RTDB URL

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long lastRequestMillis = 0;
bool signupOK = false;

// Thresholds
int soilThreshold = 500;   // Default for soil moisture
int waterThreshold = 20;   // Default for water level in cm

DHT dht(DHTPIN, DHTTYPE);

void connectToWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void setupFirebase() {
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase authentication successful.");
    signupOK = true;
  } else {
    Serial.printf("Firebase signup error: %s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

float readWaterLevel() {
  // Send a 10us pulse to TRIG_PIN
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure the duration of the echo
  long duration = pulseIn(ECHO_PIN, HIGH);

  // Calculate distance (cm)
  float distance = (duration * 0.0343) / 2.0;
  return distance;
}

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  connectToWiFi();

  // Initialize Firebase
  setupFirebase();

  // Initialize components
  dht.begin();
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  Serial.println("System initialized...");
}

void loop() {
  if (Firebase.ready() && signupOK && (millis() - lastRequestMillis > 5000 || lastRequestMillis == 0)) {
    lastRequestMillis = millis();

    // Read sensor values
    int soilMoisture = analogRead(SOIL_SENSOR_PIN);  // Soil moisture sensor
    float waterLevel = readWaterLevel();            // Ultrasonic sensor for water level
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();

    // Handle DHT22 errors
    if (isnan(temperature) || isnan(humidity)) {
      Serial.println("Error reading from DHT22 sensor!");
      return;
    }

    // Display readings
    Serial.print("Soil Moisture: ");
    Serial.println(soilMoisture);
    Serial.print("Water Level: ");
    Serial.print(waterLevel);
    Serial.println(" cm");
    Serial.print("Temperature: ");
    Serial.print(temperature);
    Serial.println(" Â°C");
    Serial.print("Humidity: ");
    Serial.print(humidity);
    Serial.println(" %");
    Serial.println("----------------------------");

    // Push sensor data to Firebase
    Firebase.RTDB.setInt(&fbdo, "/sensorData/soilMoisture", soilMoisture);
    Firebase.RTDB.setFloat(&fbdo, "/sensorData/waterLevel", waterLevel);
    Firebase.RTDB.setFloat(&fbdo, "/sensorData/temperature", temperature);
    Firebase.RTDB.setFloat(&fbdo, "/sensorData/humidity", humidity);

    // Retrieve thresholds from Firebase
    if (Firebase.RTDB.getInt(&fbdo, "/control/soilThreshold")) {
      soilThreshold = fbdo.intData();
    } else {
      Serial.println("Failed to retrieve soilThreshold from Firebase");
    }

    if (Firebase.RTDB.getInt(&fbdo, "/control/waterThreshold")) {
      waterThreshold = fbdo.intData();
    } else {
      Serial.println("Failed to retrieve waterThreshold from Firebase");
    }

    // Control water pump (relay) based on soil moisture
    if (soilMoisture < soilThreshold) {
      digitalWrite(RELAY_PIN, HIGH); // Turn on pump
      Serial.println("Pump activated!");
      Firebase.RTDB.setString(&fbdo, "/status/pump", "ON");
    } else {
      digitalWrite(RELAY_PIN, LOW);  // Turn off pump
      Serial.println("Pump deactivated!");
      Firebase.RTDB.setString(&fbdo, "/status/pump", "OFF");
    }

    // Control buzzer based on water level
    if (waterLevel > waterThreshold) {
      digitalWrite(BUZZER_PIN, HIGH); // Turn on buzzer
      Serial.println("Warning: Low water level!");
      Firebase.RTDB.setString(&fbdo, "/status/buzzer", "ON");
    } else {
      digitalWrite(BUZZER_PIN, LOW);  // Turn off buzzer
      Firebase.RTDB.setString(&fbdo, "/status/buzzer", "OFF");
    }
  }

  delay(2000); // Wait 2 seconds before next loop
}
